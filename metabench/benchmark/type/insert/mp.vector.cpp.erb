// Copyright Bruno Dutra 2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#define DISABLE_STATIC_ASSERT_TESTS
#include <mp>

template<class...> struct type_list { };

template<mp::size_t N, class T, class... Ts>
constexpr auto insert_impl() {
  mp::array v{mp::meta<Ts>...};
  mp::array<mp::meta_t, sizeof...(Ts)+1> r{};
  for (auto i = 0u; i < N; ++i) { r[i] = v[i]; }
  r[N] = mp::meta<T>;
  for (auto i = N; i < v.size(); ++i) { r[i+1] = v[i]; }
  return r;
}

template<mp::size_t N, class T, class... Ts>
using insert = mp::apply_t<type_list, insert_impl<N, T, Ts...>()>;

template<int> struct x;

<% env[:k].times do |k| %>

#if defined(METABENCH)
using <%= "result#{k}" %> = insert<<%= k*n/env[:k] %>, void, <%= ((k*n+1)..(k*n+n)).map { |i| "x<#{i}>" }.join(', ') %>>;
#endif

<% end %>

int main() {}
