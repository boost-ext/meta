// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
#define DISABLE_STATIC_ASSERT_TESTS
#include <mp>

template<class...> struct type_list { };

constexpr auto contains = [](const auto& v, auto m) {
  for (const auto& e : v) { if (e == m) return true; }
  return false;
};

template<class... Ts>
constexpr auto filter_unique_impl = [] {
  mp::vector<mp::meta_t, sizeof...(Ts)> v;
  ([&] {
      if constexpr (requires (Ts t) { t.value; }) {
        if (auto m = mp::meta<Ts>; !contains(v, m)) { v.push_back(m); }
      }
  }(), ...);
  return v;
};


template<class... Ts>
using filter_unique = mp::apply_t<type_list, filter_unique_impl<Ts...>()>;

template<int> struct x;

<% env[:k].times do |k| %>
    <% (env[:p]*n/100).times do |p| %>
    #if defined(METABENCH)
    using <%= "result#{p}#{k}" %> = filter_unique<<%= ((1)..(n)).map { |i| "x<#{i}>" }.join(', ') %>, <%= ((1)..(n)).map { |i| "x<#{i}>" }.join(', ') %>>;
    #endif
    <% end %>
<% end %>

int main() {}
