// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
#include <vector>
#include <array>
#include <ranges>
#include <experimental/meta>

template<class...> struct type_list { };

template<class... Ts>
constexpr auto filter_unique_impl = [] {
  std::vector<std::meta::info> r;
  std::array in{^Ts...};
  std::array vs{requires(Ts t) { t.value; }...};
  for (auto i = 0u; i < in.size(); ++i) {
    if (vs[i] and std::ranges::find(r, in[i]) == r.cend()) { 
      r.push_back(in[i]);
    }
  }
  return substitute(^type_list, r);
};

template<class... Ts>
using filter_unique = typename [:filter_unique_impl<Ts...>():];

template<int> struct x;

<% env[:k].times do |k| %>
    <% (env[:p]*n/100).times do |p| %>
    #if defined(METABENCH)
    using <%= "result#{p}#{k}" %> = filter_unique<<%= ((1)..(n)).map { |i| "x<#{i}>" }.join(', ') %>, <%= ((1)..(n)).map { |i| "x<#{i}>" }.join(', ') %>>;
    #endif
    <% end %>
<% end %>

int main() {}
