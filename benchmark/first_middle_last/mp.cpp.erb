//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/mp.hpp>
#include <cassert>

#if defined(METABENCH)
template <auto List>
auto first_middle_last = List | [](std::ranges::range auto types) {
    assert(std::size(types) >= 3);
    return std::array{
        boost::mp::meta{.index = 0},
        boost::mp::meta{.index = types.size() / 2},
        boost::mp::meta{.index = types.size()-1}
    };
};

static_assert(3 ==
  first_middle_last<boost::mp::type_list<
  <% (0..n-1).each do |i| %>
  std::integral_constant<std::size_t, <%= i %>>
  <%= ',' if i < n-1 %>
  <% end %>
>{}>.size);
#endif

int main() {}
