//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/mp11/algorithm.hpp>

#if defined(METABENCH)
template <class TList>
struct first_middle_last {
  using first = boost::mp11::mp_first<TList>;
  using middle = boost::mp11::mp_at_c<TList, boost::mp11::mp_size<TList>{} / 2>;
  using last = boost::mp11::mp_first<boost::mp11::mp_reverse<TList>>;
  using type = boost::mp11::mp_list<first, middle, last>;
};

template<class TList>
using first_middle_last_t = typename first_middle_last<TList>::type;

static_assert(3 ==
  boost::mp11::mp_size<first_middle_last_t<boost::mp11::mp_list<
  <% (0..n-1).each do |i| %>
  std::integral_constant<std::size_t, <%= i %>>
  <%= ',' if i < n-1 %>
  <% end %>
>>>{});
#endif

int main() {}
