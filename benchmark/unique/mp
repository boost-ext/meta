#define DISABLE_STATIC_ASSERT_TESTS
#include <mp>

template<class...> struct type_list { };

constexpr auto contains = [](const auto& v, auto m) {
  for (const auto& e : v) { if (e == m) return true; }
  return false;
};

template<class... Ts>
constexpr auto unique_impl = [] {
  mp::vector<mp::meta_t, sizeof...(Ts)> v;
  ([&] {
      if (auto m = mp::meta<Ts>; !contains(v, m)) { v.push_back(m); }
  }(), ...);
  return v;
};

template<class... Ts>
using unique = mp::apply_t<type_list, unique_impl<Ts...>()>;
