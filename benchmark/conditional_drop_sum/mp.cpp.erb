//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <algorithm>
#include <boost/mp.hpp>
#include <ranges>

#if defined(METABENCH)
template<auto N> constexpr auto div_by = [](auto value) { return value / N; };
template<auto N>
constexpr auto drop_last = std::ranges::views::take(N);
constexpr auto unique = []<class... Ts>(std::ranges::range auto types) {
    types.erase(
        std::unique(types.begin(), types.end(),
                    [vs = std::array<std::size_t, sizeof...(Ts)>{Ts{}...}](auto lhs, auto rhs) { return vs[lhs] == vs[rhs]; }),
        std::end(types));
    return types;
};
constexpr auto sum = []<class... Ts> {
  return (Ts{} + ...);
};


template <auto v>
constexpr auto conditional_drop_sum =  v |
  []<class... Ts> {
    if constexpr ((div_by<7>(Ts{}) or ...)) {
      return v | drop_last<boost::mp::_c<sizeof...(Ts) - 2>>
               | unique
               | sum;
    } else {
      return 0u;
    }
  };

static_assert(<%= (0..n-2).sum %> ==
  conditional_drop_sum<boost::mp::type_list<
  <% (0..n-1).each do |i| %>
  std::integral_constant<std::size_t, <%= i %>>,
  std::integral_constant<std::size_t, <%= i %>>
  <%= ',' if i < n-1 %>
  <% end %>
>{}>);
#endif

int main() {}
