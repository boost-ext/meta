//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <algorithm>
#include <boost/mp.hpp>
#include <ranges>

#if defined(METABENCH)
template <auto v>
auto sort_unique_reverse = [] {
  auto sort = []<class... Ts>(std::ranges::range auto types) {
    std::sort(std::begin(types), std::end(types),
              [](auto lhs, auto rhs) {
                return lhs.size < rhs.size;
              });
    return types;
  };

  auto unique = []<class... Ts>(std::ranges::range auto types) {
    types.erase(
        std::unique(std::begin(types), std::end(types),
                    [values = std::array{Ts::value...}](auto lhs, auto rhs) {
                      return values[lhs] == values[rhs];
                    }),
        std::end(types));

    return types;
  };

  return v | sort | unique | std::ranges::views::reverse;
}();

static_assert(<%= n %> ==
  sort_unique_reverse<boost::mp::type_list<
  <% (0..n-1).each do |i| %>
  std::integral_constant<std::size_t, <%= i %>>
  <%= ',' if i < n-1 %>
  <% end %>
>{}>.size);
#endif

int main() {}
